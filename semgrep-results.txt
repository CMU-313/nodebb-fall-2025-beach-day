
> nodebb@4.4.6 semgrep
> semgrep scan --config p/security-audit --config p/owasp-top-ten --config p/nodejs --config p/javascript

                    
                    
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 30 Code Findings ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                 
  [36m[22m[24m  install/web.js[0m
    ‚ùØ‚ù± javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name
          Don‚Äôt use the default session cookie name Using the default session cookie name can open your app to
          attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to    
          fingerprint the server and target attacks accordingly.                                              
          Details: https://sg.run/1Z5x                                                                        
                                                                                                              
           81‚îÜ app.use(session({
           82‚îÜ    secret: utils.generateUUID(),
           83‚îÜ    resave: false,
           84‚îÜ    saveUninitialized: false,
           85‚îÜ }));
   
    ‚ùØ‚ù± javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain
          Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it
          to compare against the domain of the server in which the URL is being requested. If they match, then
          check the path attribute next.                                                                      
          Details: https://sg.run/rd41                                                                        
                                                                                                              
           81‚îÜ app.use(session({
           82‚îÜ    secret: utils.generateUUID(),
           83‚îÜ    resave: false,
           84‚îÜ    saveUninitialized: false,
           85‚îÜ }));
   
    ‚ùØ‚ù± javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires
          Default session middleware settings: `expires` not set. Use it to set expiration date for persistent
          cookies.                                                                                            
          Details: https://sg.run/N4eG                                                                        
                                                                                                              
           81‚îÜ app.use(session({
           82‚îÜ    secret: utils.generateUUID(),
           83‚îÜ    resave: false,
           84‚îÜ    saveUninitialized: false,
           85‚îÜ }));
   
    ‚ùØ‚ù± javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly
          Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over
          HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.        
          Details: https://sg.run/ydBO                                                                    
                                                                                                          
           81‚îÜ app.use(session({
           82‚îÜ    secret: utils.generateUUID(),
           83‚îÜ    resave: false,
           84‚îÜ    saveUninitialized: false,
           85‚îÜ }));
   
    ‚ùØ‚ù± javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path
          Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to
          compare against the request path. If this and domain match, then send the cookie in the request.   
          Details: https://sg.run/b7pd                                                                       
                                                                                                             
           81‚îÜ app.use(session({
           82‚îÜ    secret: utils.generateUUID(),
           83‚îÜ    resave: false,
           84‚îÜ    saveUninitialized: false,
           85‚îÜ }));
   
    ‚ùØ‚ù± javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure
          Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie
          over HTTPS.                                                                                        
          Details: https://sg.run/9oKz                                                                       
                                                                                                             
           81‚îÜ app.use(session({
           82‚îÜ    secret: utils.generateUUID(),
           83‚îÜ    resave: false,
           84‚îÜ    saveUninitialized: false,
           85‚îÜ }));
   
   ‚ùØ‚ùØ‚ù± javascript.express.security.require-request.require-request
          If an attacker controls the x in require(x) then they can cause code to load that was not intended
          to run on the server.                                                                             
          Details: https://sg.run/jRbl                                                                      
                                                                                                            
          129‚îÜ db = require(`../src/database/${dbName}`);
                                                
  [36m[22m[24m  src/controllers/admin/info.js[0m
   ‚ùØ‚ùØ‚ù± javascript.lang.security.detect-child-process.detect-child-process
          Detected calls to child_process from a function argument `cmd`. This could lead to a command  
          injection if the input is user controllable. Try to avoid calls to child_process, and if it is
          needed ensure user input is correctly sanitized or sandboxed.                                 
          Details: https://sg.run/l2lo                                                                  
                                                                                                        
          132‚îÜ exec(cmd, (err, stdout) => {
                                                  
  [36m[22m[24m  src/controllers/admin/themes.js[0m
    ‚ùØ‚ù± javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
          Possible writing outside of the destination, make sure that the target path is nested in the
          intended destination                                                                        
          Details: https://sg.run/weRn                                                                
                                                                                                      
           14‚îÜ const themeDir = path.join(paths.nodeModules, req.params.theme);
            ‚ãÆ‚îÜ----------------------------------------
           15‚îÜ const themeConfigPath = path.join(themeDir, 'theme.json');
            ‚ãÆ‚îÜ----------------------------------------
           29‚îÜ path.join(themeDir, themeConfig.screenshot) :
            ‚ãÆ‚îÜ----------------------------------------
           29‚îÜ path.join(themeDir, themeConfig.screenshot) :
   
    ‚ùØ‚ù± javascript.express.security.audit.express-res-sendfile.express-res-sendfile
          The application processes user-input, this is passed to res.sendFile which can allow an attacker to
          arbitrarily read files on the system through path traversal. It is recommended to perform input    
          validation in addition to canonicalizing the path. This allows you to validate the path against the
          intended directory it should be accessing.                                                         
          Details: https://sg.run/7DJk                                                                       
                                                                                                             
           36‚îÜ res.sendFile(exists ? screenshotPath : defaultScreenshotPath);
                                                   
  [36m[22m[24m  src/controllers/admin/uploads.js[0m
    ‚ùØ‚ù± javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
          Possible writing outside of the destination, make sure that the target path is nested in the
          intended destination                                                                        
          Details: https://sg.run/weRn                                                                
                                                                                                      
           20‚îÜ const currentFolder = path.join(nconf.get('upload_path'), req.query.dir || '');
            ‚ãÆ‚îÜ----------------------------------------
          231‚îÜ if (!await file.exists(path.join(nconf.get('upload_path'), params.folder))) {
                                                 
  [36m[22m[24m  src/controllers/write/users.js[0m
    ‚ùØ‚ù± javascript.express.security.audit.express-res-sendfile.express-res-sendfile
          The application processes user-input, this is passed to res.sendFile which can allow an attacker to
          arbitrarily read files on the system through path traversal. It is recommended to perform input    
          validation in addition to canonicalizing the path. This allows you to validate the path against the
          intended directory it should be accessing.                                                         
          Details: https://sg.run/7DJk                                                                       
                                                                                                             
          222‚îÜ res.sendFile(data.filename, {
                                 
  [36m[22m[24m  src/emailer.js[0m
    ‚ùØ‚ù± problem-based-packs.insecure-transport.js-node.bypass-tls-verification.bypass-tls-verification
          Checks for setting the environment variable NODE_TLS_REJECT_UNAUTHORIZED to 0, which disables TLS   
          verification. This should only be used for debugging purposes. Setting the option rejectUnauthorized
          to false bypasses verification against the list of trusted CAs, which also leads to insecure        
          transport. These options lead to vulnerability to MTM attacks, and should not be used.              
          Details: https://sg.run/9oxr                                                                        
                                                                                                              
          157‚îÜ smtpOptions.tls = {
          158‚îÜ    rejectUnauthorized: false,
          159‚îÜ };
                                           
  [36m[22m[24m  src/middleware/assert.js[0m
    ‚ùØ‚ù± javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
          Possible writing outside of the destination, make sure that the target path is nested in the
          intended destination                                                                        
          Details: https://sg.run/weRn                                                                
                                                                                                      
           95‚îÜ const pathToFile = path.join(nconf.get('upload_path'), req.body.path);
            ‚ãÆ‚îÜ----------------------------------------
          112‚îÜ const folderPath = path.join(res.locals.cleanedPath, folderName);
                                   
  [36m[22m[24m  src/webserver.js[0m
    ‚ùØ‚ù± javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name
          Don‚Äôt use the default session cookie name Using the default session cookie name can open your app to
          attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to    
          fingerprint the server and target attacks accordingly.                                              
          Details: https://sg.run/1Z5x                                                                        
                                                                                                              
          174‚îÜ app.use(session({
          175‚îÜ    store: db.sessionStore,
          176‚îÜ    secret: nconf.get('secret'),
          177‚îÜ    key: nconf.get('sessionKey'),
          178‚îÜ    cookie: setupCookie(),
          179‚îÜ    resave: nconf.get('sessionResave') || false,
          180‚îÜ    saveUninitialized: nconf.get('sessionSaveUninitialized') || false,
          181‚îÜ }));
   
    ‚ùØ‚ù± javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain
          Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it
          to compare against the domain of the server in which the URL is being requested. If they match, then
          check the path attribute next.                                                                      
          Details: https://sg.run/rd41                                                                        
                                                                                                              
          174‚îÜ app.use(session({
          175‚îÜ    store: db.sessionStore,
          176‚îÜ    secret: nconf.get('secret'),
          177‚îÜ    key: nconf.get('sessionKey'),
          178‚îÜ    cookie: setupCookie(),
          179‚îÜ    resave: nconf.get('sessionResave') || false,
          180‚îÜ    saveUninitialized: nconf.get('sessionSaveUninitialized') || false,
          181‚îÜ }));
   
    ‚ùØ‚ù± javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires
          Default session middleware settings: `expires` not set. Use it to set expiration date for persistent
          cookies.                                                                                            
          Details: https://sg.run/N4eG                                                                        
                                                                                                              
          174‚îÜ app.use(session({
          175‚îÜ    store: db.sessionStore,
          176‚îÜ    secret: nconf.get('secret'),
          177‚îÜ    key: nconf.get('sessionKey'),
          178‚îÜ    cookie: setupCookie(),
          179‚îÜ    resave: nconf.get('sessionResave') || false,
          180‚îÜ    saveUninitialized: nconf.get('sessionSaveUninitialized') || false,
          181‚îÜ }));
   
    ‚ùØ‚ù± javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly
          Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over
          HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.        
          Details: https://sg.run/ydBO                                                                    
                                                                                                          
          174‚îÜ app.use(session({
          175‚îÜ    store: db.sessionStore,
          176‚îÜ    secret: nconf.get('secret'),
          177‚îÜ    key: nconf.get('sessionKey'),
          178‚îÜ    cookie: setupCookie(),
          179‚îÜ    resave: nconf.get('sessionResave') || false,
          180‚îÜ    saveUninitialized: nconf.get('sessionSaveUninitialized') || false,
          181‚îÜ }));
   
    ‚ùØ‚ù± javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path
          Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to
          compare against the request path. If this and domain match, then send the cookie in the request.   
          Details: https://sg.run/b7pd                                                                       
                                                                                                             
          174‚îÜ app.use(session({
          175‚îÜ    store: db.sessionStore,
          176‚îÜ    secret: nconf.get('secret'),
          177‚îÜ    key: nconf.get('sessionKey'),
          178‚îÜ    cookie: setupCookie(),
          179‚îÜ    resave: nconf.get('sessionResave') || false,
          180‚îÜ    saveUninitialized: nconf.get('sessionSaveUninitialized') || false,
          181‚îÜ }));
   
    ‚ùØ‚ù± javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure
          Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie
          over HTTPS.                                                                                        
          Details: https://sg.run/9oKz                                                                       
                                                                                                             
          174‚îÜ app.use(session({
          175‚îÜ    store: db.sessionStore,
          176‚îÜ    secret: nconf.get('secret'),
          177‚îÜ    key: nconf.get('sessionKey'),
          178‚îÜ    cookie: setupCookie(),
          179‚îÜ    resave: nconf.get('sessionResave') || false,
          180‚îÜ    saveUninitialized: nconf.get('sessionSaveUninitialized') || false,
          181‚îÜ }));
                                         
  [36m[22m[24m  test/authentication.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag
          Cannot determine what 'nconf' is and it is used with a '<script>' tag. This could be susceptible to
          cross-site scripting (XSS). Ensure 'nconf' is not externally controlled, or sanitize this data.    
          Details: https://sg.run/1Zy1                                                                       
                                                                                                             
          273‚îÜ const { response } = await request.post(`${nconf.get('url')}/login`, {
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag
          Cannot determine what 'jar' is and it is used with a '<script>' tag. This could be susceptible to
          cross-site scripting (XSS). Ensure 'jar' is not externally controlled, or sanitize this data.    
          Details: https://sg.run/1Zy1                                                                     
                                                                                                           
          278‚îÜ jar: jar,
                                
  [36m[22m[24m  test/flags.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag
          Cannot determine what 'nconf' is and it is used with a '<script>' tag. This could be susceptible to
          cross-site scripting (XSS). Ensure 'nconf' is not externally controlled, or sanitize this data.    
          Details: https://sg.run/1Zy1                                                                       
                                                                                                             
          915‚îÜ const { body } = await request.post(`${nconf.get('url')}/api/v3/flags`, {
            ‚ãÆ‚îÜ----------------------------------------
          932‚îÜ const { body } = await                                                                  
               request.get(`${nconf.get('url')}/api/flags?quick="<script>alert('foo');</script>`, { jar
               });                                                                                     
                                       
  [36m[22m[24m  test/search-admin.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag
          Cannot determine what 'search' is and it is used with a '<script>' tag. This could be susceptible to
          cross-site scripting (XSS). Ensure 'search' is not externally controlled, or sanitize this data.    
          Details: https://sg.run/1Zy1                                                                        
                                                                                                              
           49‚îÜ search.sanitize('Pellentesque tristique senectus' +

