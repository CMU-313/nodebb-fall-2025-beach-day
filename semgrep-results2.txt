
> nodebb@4.4.6 semgrep
> semgrep scan --config p/security-audit --config p/owasp-top-ten --config p/nodejs --config p/javascript

                   
                   
┌─────────────────┐
│ 8 Code Findings │
└─────────────────┘
                                                  
  [36m[22m[24m  src/controllers/admin/themes.js[0m
    ❯❱ javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
          Possible writing outside of the destination, make sure that the target path is nested in the
          intended destination                                                                        
          Details: https://sg.run/weRn                                                                
                                                                                                      
           33┆ path.join(themeDir, themeConfig.screenshot) :
            ⋮┆----------------------------------------
           33┆ path.join(themeDir, themeConfig.screenshot) :
                                 
  [36m[22m[24m  src/emailer.js[0m
    ❯❱ problem-based-packs.insecure-transport.js-node.bypass-tls-verification.bypass-tls-verification
          Checks for setting the environment variable NODE_TLS_REJECT_UNAUTHORIZED to 0, which disables TLS   
          verification. This should only be used for debugging purposes. Setting the option rejectUnauthorized
          to false bypasses verification against the list of trusted CAs, which also leads to insecure        
          transport. These options lead to vulnerability to MTM attacks, and should not be used.              
          Details: https://sg.run/9oxr                                                                        
                                                                                                              
          160┆ smtpOptions.tls = {
          161┆    rejectUnauthorized: false,
          162┆ };
                                         
  [36m[22m[24m  test/authentication.js[0m
    ❯❱ javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag
          Cannot determine what 'nconf' is and it is used with a '<script>' tag. This could be susceptible to
          cross-site scripting (XSS). Ensure 'nconf' is not externally controlled, or sanitize this data.    
          Details: https://sg.run/1Zy1                                                                       
                                                                                                             
          273┆ const { response } = await request.post(`${nconf.get('url')}/login`, {
            ⋮┆----------------------------------------
    ❯❱ javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag
          Cannot determine what 'jar' is and it is used with a '<script>' tag. This could be susceptible to
          cross-site scripting (XSS). Ensure 'jar' is not externally controlled, or sanitize this data.    
          Details: https://sg.run/1Zy1                                                                     
                                                                                                           
          278┆ jar: jar,
                                
  [36m[22m[24m  test/flags.js[0m
    ❯❱ javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag
          Cannot determine what 'nconf' is and it is used with a '<script>' tag. This could be susceptible to
          cross-site scripting (XSS). Ensure 'nconf' is not externally controlled, or sanitize this data.    
          Details: https://sg.run/1Zy1                                                                       
                                                                                                             
          915┆ const { body } = await request.post(`${nconf.get('url')}/api/v3/flags`, {
            ⋮┆----------------------------------------
          932┆ const { body } = await                                                                  
               request.get(`${nconf.get('url')}/api/flags?quick="<script>alert('foo');</script>`, { jar
               });                                                                                     
                                       
  [36m[22m[24m  test/search-admin.js[0m
    ❯❱ javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag
          Cannot determine what 'search' is and it is used with a '<script>' tag. This could be susceptible to
          cross-site scripting (XSS). Ensure 'search' is not externally controlled, or sanitize this data.    
          Details: https://sg.run/1Zy1                                                                        
                                                                                                              
           49┆ search.sanitize('Pellentesque tristique senectus' +

